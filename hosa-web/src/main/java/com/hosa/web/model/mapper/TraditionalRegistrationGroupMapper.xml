<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="TraditionalRegistrationGroup">

	<resultMap id="TraditionalRegistrationGroup.RM" type="com.hosa.web.model.TraditionalRegistrationGroup">
        <result property="id" column="id"/>        
        <result property="departmentId" column="department_id"/>        
        <result property="name" column="name"/>        
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="TraditionalRegistrationGroup.columns">
	    <![CDATA[
		t_traditional_registration_group.id,t_traditional_registration_group.department_id,t_traditional_registration_group.name
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="TraditionalRegistrationGroup.insert" useGeneratedKeys="true" keyProperty="id">
   
        INSERT INTO t_traditional_registration_group (
	        	id
		     	<if test="@Ognl@isNotNull(departmentId)">
		        	,department_id
		      	</if>
		     	<if test="@Ognl@isNotNull(name)">
		        	,name
		      	</if>
        
        ) VALUES (
	        	#{id}
		     	<if test="@Ognl@isNotNull(departmentId)">
		        	,#{departmentId}
		      	</if>
		     	<if test="@Ognl@isNotNull(name)">
		        	,#{name}
		      	</if>
        )
    
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="TraditionalRegistrationGroup.update" >
    
        UPDATE t_traditional_registration_group 
			<set>
		        <if test="@Ognl@isNotNull(departmentId)">
		        		department_id = #{departmentId},
		        	</if>
		        	
		        <if test="@Ognl@isNotNull(name)">
		        		name = #{name},
		        	</if>
		        	
	        </set>
        WHERE 
	        id = #{id} 
   
	</update>

    <delete id="TraditionalRegistrationGroup.delete">
    <![CDATA[
        DELETE FROM t_traditional_registration_group 
        WHERE
        id = #{id} 
    ]]>
    </delete>
    <delete id="TraditionalRegistrationGroup.deleteMultiple">

        DELETE FROM t_traditional_registration_group 
        WHERE
        	id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
   
    </delete>
    <select id="TraditionalRegistrationGroup.getById" resultMap="TraditionalRegistrationGroup.RM">
		SELECT 
		<include refid="TraditionalRegistrationGroup.columns" />
	    <![CDATA[
		    FROM t_traditional_registration_group as t_traditional_registration_group
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<select id="TraditionalRegistrationGroup.getByMultipleId" resultMap="TraditionalRegistrationGroup.RM">
		SELECT 
		<include refid="TraditionalRegistrationGroup.columns" />
		    FROM t_traditional_registration_group as t_traditional_registration_group
	        WHERE 
		       id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
	</select>
	
	<sql id="TraditionalRegistrationGroup.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
			<if test="@Ognl@isNotEmpty(id)">
				AND t_traditional_registration_group.id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(idNotEq)">
				AND t_traditional_registration_group.id &lt;&gt; #{idNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(idGT)">
				AND t_traditional_registration_group.id &gt; #{idGT}
			</if>
			<if test="@Ognl@isNotEmpty(idLT)">
				AND t_traditional_registration_group.id &lt; #{idLT}
			</if>
			<if test="@Ognl@isNotEmpty(idGE)">
				AND t_traditional_registration_group.id &gt;= #{idGE}
			</if>
			<if test="@Ognl@isNotEmpty(idLE)">
				AND t_traditional_registration_group.id &lt;= #{idLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(idList)">
				AND t_traditional_registration_group.id in
				<foreach collection="idList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(idNotEqList)">
				AND t_traditional_registration_group.id not in
				<foreach collection="idNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
			<if test="@Ognl@isNotEmpty(departmentId)">
				AND t_traditional_registration_group.department_id = #{departmentId}
			</if>
			<if test="@Ognl@isNotEmpty(departmentIdNotEq)">
				AND t_traditional_registration_group.department_id &lt;&gt; #{departmentIdNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(departmentIdGT)">
				AND t_traditional_registration_group.department_id &gt; #{departmentIdGT}
			</if>
			<if test="@Ognl@isNotEmpty(departmentIdLT)">
				AND t_traditional_registration_group.department_id &lt; #{departmentIdLT}
			</if>
			<if test="@Ognl@isNotEmpty(departmentIdGE)">
				AND t_traditional_registration_group.department_id &gt;= #{departmentIdGE}
			</if>
			<if test="@Ognl@isNotEmpty(departmentIdLE)">
				AND t_traditional_registration_group.department_id &lt;= #{departmentIdLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(departmentIdList)">
				AND t_traditional_registration_group.department_id in
				<foreach collection="departmentIdList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(departmentIdNotEqList)">
				AND t_traditional_registration_group.department_id not in
				<foreach collection="departmentIdNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(name)">
				AND t_traditional_registration_group.name = #{name}
			</if>
			<if test="@Ognl@isNotEmpty(nameLike)">
				AND t_traditional_registration_group.name like CONCAT('%', CONVERT(#{nameLike}, char) ,'%') 
			</if>
			<if test="@Ognl@isNotEmpty(nameBeginLike)">
				AND t_traditional_registration_group.name like CONCAT('', CONVERT(#{nameBeginLike}, char) ,'%') 
			</if>
			<if test="@Ognl@isNotEmpty(nameEndLike)">
				AND t_traditional_registration_group.name like CONCAT('%', CONVERT(#{nameEndLike}, char) ,'') 
			</if>
		</where>
	</sql>
		
    <select id="TraditionalRegistrationGroup.findPage.count" resultType="long">
        SELECT count(*) FROM t_traditional_registration_group as t_traditional_registration_group 
		<include refid="TraditionalRegistrationGroup.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="TraditionalRegistrationGroup.findPage" resultMap="TraditionalRegistrationGroup.RM">
    	SELECT 
    	<include refid="TraditionalRegistrationGroup.columns" />
	    FROM t_traditional_registration_group as t_traditional_registration_group 
		<include refid="TraditionalRegistrationGroup.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <select id="TraditionalRegistrationGroup.findList" resultMap="TraditionalRegistrationGroup.RM">
    	SELECT 
    	<include refid="TraditionalRegistrationGroup.columns" />
	     FROM t_traditional_registration_group as t_traditional_registration_group 
		<include refid="TraditionalRegistrationGroup.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	
</mapper>


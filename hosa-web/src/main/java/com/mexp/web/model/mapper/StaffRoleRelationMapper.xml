<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="StaffRoleRelation">

	<resultMap id="StaffRoleRelation.RM" type="com.mexp.web.model.StaffRoleRelation">
        <result property="id" column="id"/>        
        <result property="staffId" column="staff_id"/>        
        <result property="roleId" column="role_id"/>        
        <result property="modified" column="modified"/>   
        
        <result property="role.id" column="role_id"/>    
        <result property="role.name" column="role_name"/>    
        <result property="staff.id" column="staff_id"/>  
        <result property="staff.name" column="staff_name"/>        
	     
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="StaffRoleRelation.columns">
	    <![CDATA[
		t_staff_role_relation.id,t_staff_role_relation.staff_id,t_staff_role_relation.role_id,t_staff_role_relation.modified
	    ]]>
	</sql>

<sql id="StaffRoleRelation.Staff.columns">
	    <![CDATA[
		t_staff.id as staff_id, t_staff.name as staff_name
	    ]]>
	</sql>
	
	<sql id="StaffRoleRelation.Role.columns">
	    <![CDATA[
		t_role.id as role_id, t_role.name as role_name
	    ]]>
	</sql>
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="StaffRoleRelation.insert" useGeneratedKeys="true" keyProperty="id">
   
        INSERT INTO t_staff_role_relation (
	        	id
		     	<if test="@Ognl@isNotNull(staffId)">
		        	,staff_id
		      	</if>
		     	<if test="@Ognl@isNotNull(roleId)">
		        	,role_id
		      	</if>
		     	<if test="@Ognl@isNotNull(modified)">
		        	,modified
		      	</if>
        
        ) VALUES (
	        	#{id}
		     	<if test="@Ognl@isNotNull(staffId)">
		        	,#{staffId}
		      	</if>
		     	<if test="@Ognl@isNotNull(roleId)">
		        	,#{roleId}
		      	</if>
		     	<if test="@Ognl@isNotNull(modified)">
		        	,#{modified}
		      	</if>
        )
    
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="StaffRoleRelation.update" >
    
        UPDATE t_staff_role_relation 
			<set>
		        <if test="@Ognl@isNotNull(staffId)">
		        		staff_id = #{staffId},
		        	</if>
		        	
		        <if test="@Ognl@isNotNull(roleId)">
		        		role_id = #{roleId},
		        	</if>
		        	
		        	
	        </set>
        WHERE 
	        id = #{id} 
			<if test="@Ognl@isNotNull(modified)">
		      and 
   			modified = #{modified}
		    </if>
   
	</update>

    <delete id="StaffRoleRelation.delete">
    <![CDATA[
        DELETE FROM t_staff_role_relation 
        WHERE
        id = #{id} 
    ]]>
    </delete>
    <delete id="StaffRoleRelation.deleteMultiple">

        DELETE FROM t_staff_role_relation 
        WHERE
        	id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
   
    </delete>
    <select id="StaffRoleRelation.getById" resultMap="StaffRoleRelation.RM">
		SELECT 
		<include refid="StaffRoleRelation.columns" />
	    <![CDATA[
		    FROM t_staff_role_relation as t_staff_role_relation
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<select id="StaffRoleRelation.getByMultipleId" resultMap="StaffRoleRelation.RM">
		SELECT 
		<include refid="StaffRoleRelation.columns" />
		    FROM t_staff_role_relation as t_staff_role_relation
	        WHERE 
		       id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
	</select>
	
	<sql id="StaffRoleRelation.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
			<if test="@Ognl@isNotEmpty(id)">
				AND t_staff_role_relation.id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(idNotEq)">
				AND t_staff_role_relation.id &lt;&gt; #{idNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(idGT)">
				AND t_staff_role_relation.id &gt; #{idGT}
			</if>
			<if test="@Ognl@isNotEmpty(idLT)">
				AND t_staff_role_relation.id &lt; #{idLT}
			</if>
			<if test="@Ognl@isNotEmpty(idGE)">
				AND t_staff_role_relation.id &gt;= #{idGE}
			</if>
			<if test="@Ognl@isNotEmpty(idLE)">
				AND t_staff_role_relation.id &lt;= #{idLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(idList)">
				AND t_staff_role_relation.id in
				<foreach collection="idList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(idNotEqList)">
				AND t_staff_role_relation.id not in
				<foreach collection="idNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
			<if test="@Ognl@isNotEmpty(staffId)">
				AND t_staff_role_relation.staff_id = #{staffId}
			</if>
			<if test="@Ognl@isNotEmpty(staffIdNotEq)">
				AND t_staff_role_relation.staff_id &lt;&gt; #{staffIdNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(staffIdGT)">
				AND t_staff_role_relation.staff_id &gt; #{staffIdGT}
			</if>
			<if test="@Ognl@isNotEmpty(staffIdLT)">
				AND t_staff_role_relation.staff_id &lt; #{staffIdLT}
			</if>
			<if test="@Ognl@isNotEmpty(staffIdGE)">
				AND t_staff_role_relation.staff_id &gt;= #{staffIdGE}
			</if>
			<if test="@Ognl@isNotEmpty(staffIdLE)">
				AND t_staff_role_relation.staff_id &lt;= #{staffIdLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(staffIdList)">
				AND t_staff_role_relation.staff_id in
				<foreach collection="staffIdList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(staffIdNotEqList)">
				AND t_staff_role_relation.staff_id not in
				<foreach collection="staffIdNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
			<if test="@Ognl@isNotEmpty(roleId)">
				AND t_staff_role_relation.role_id = #{roleId}
			</if>
			<if test="@Ognl@isNotEmpty(roleIdNotEq)">
				AND t_staff_role_relation.role_id &lt;&gt; #{roleIdNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(roleIdGT)">
				AND t_staff_role_relation.role_id &gt; #{roleIdGT}
			</if>
			<if test="@Ognl@isNotEmpty(roleIdLT)">
				AND t_staff_role_relation.role_id &lt; #{roleIdLT}
			</if>
			<if test="@Ognl@isNotEmpty(roleIdGE)">
				AND t_staff_role_relation.role_id &gt;= #{roleIdGE}
			</if>
			<if test="@Ognl@isNotEmpty(roleIdLE)">
				AND t_staff_role_relation.role_id &lt;= #{roleIdLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(roleIdList)">
				AND t_staff_role_relation.role_id in
				<foreach collection="roleIdList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(roleIdNotEqList)">
				AND t_staff_role_relation.role_id not in
				<foreach collection="roleIdNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
	       <if test="@Ognl@isNotEmpty(modifiedBegin)">
				AND t_staff_role_relation.modified &gt;= #{modifiedBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(modifiedEnd)">
				AND t_staff_role_relation.modified &lt;= #{modifiedEnd}
		   </if>
		</where>
	</sql>
		
    <select id="StaffRoleRelation.findPage.count" resultType="long">
        SELECT count(*) FROM t_staff_role_relation as t_staff_role_relation 
		<include refid="StaffRoleRelation.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="StaffRoleRelation.findPage" resultMap="StaffRoleRelation.RM">
    	SELECT 
    	<include refid="StaffRoleRelation.columns" />
	     FROM t_staff_role_relation as t_staff_role_relation 
		<include refid="StaffRoleRelation.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <select id="StaffRoleRelation.findList" resultMap="StaffRoleRelation.RM">
    	SELECT 
    	<include refid="StaffRoleRelation.columns" />
    	,<include refid="StaffRoleRelation.Staff.columns" />
    	,<include refid="StaffRoleRelation.Role.columns" />
    	
	    FROM t_staff_role_relation as t_staff_role_relation 
	     inner join
	     t_staff as t_staff
	     on t_staff_role_relation.staff_id = t_staff.id
	     inner join 
	     t_role as t_role
	     on t_staff_role_relation.role_id = t_role.id
		<include refid="StaffRoleRelation.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<delete id="StaffRoleRelation.deleteByMultipleDepartmentIdAndMultipleRoleId">

        DELETE FROM t_staff_role_relation 
        WHERE
        	t_staff_role_relation.staff_id in (
        		select 
        			t_staff.id 
        		from 
        			t_staff as t_staff
        		where 
        			t_staff.department_id in
	        	<foreach collection="departmentIdList" item="id" index="index" open="(" close=")" separator="," >
				#{id}			
				</foreach>
        	)
        	
          and t_staff_role_relation.role_id in
          <foreach collection="roleList" item="id" index="index" open="(" close=")" separator="," >
			#{id}			
			</foreach>
   
    </delete>
    
    <delete id="StaffRoleRelation.deleteByMultipleStaffId">

        DELETE FROM t_staff_role_relation 
        WHERE
        	staff_id in
        	<foreach collection="staffIdList" item="id" index="index" open="(" close=")" separator="," >
			#{id}			
			</foreach>
   
    </delete>
</mapper>


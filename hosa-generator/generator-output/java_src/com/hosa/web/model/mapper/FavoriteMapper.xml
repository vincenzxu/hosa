<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Favorite">

	<resultMap id="Favorite.RM" type="com.hosa.web.model.Favorite">
        <result property="id" column="id"/>        
        
        <result property="name" column="name"/>        
        
        <result property="favoriteCnt" column="favorite_cnt"/>        
        
        <result property="createdAt" column="created_at"/>        
        
	</resultMap>
	
	<sql id="Favorite.get.columns">
			 t_favorite.id
			, t_favorite.name
			, t_favorite.favorite_cnt
			, t_favorite.created_at
	</sql>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Favorite.query.columns">
			 t_favorite.id
			
			<if test="@Ognl@isTrue(nameQueryShow)  or @Ognl@isTrue(queryShowAll)">
			, t_favorite.name
			</if>
			<if test="@Ognl@isTrue(favoriteCntQueryShow)  or @Ognl@isTrue(queryShowAll)">
			, t_favorite.favorite_cnt
			</if>
			<if test="@Ognl@isTrue(createdAtQueryShow)  or @Ognl@isTrue(queryShowAll)">
			, t_favorite.created_at
			</if>
	</sql>
	
	
	<sql id="Favorite.query.advanced.columns">
	   <if test="@Ognl@isNotEmpty(nameListOr)">
				
				<foreach collection="nameListOr" item="nameListOrId" index="index" open=",(" close=")" separator="+" >
				if(locate(#{nameListOrId}, t_favorite.name), 1, 0)
				</foreach>
				 as name_advanced_score
		</if>
		<if test="@Ognl@isNotEmpty(nameLikeListOr)">
			
				<foreach collection="nameLikeListOr" item="nameLikeListOrId" index="index" open=", (" close=")" separator="+" >
				if(locate(#{nameLikeListOrId}, t_favorite.name), 1, 0)
				</foreach>
				as name_advanced_score
			</if>
			<if test="@Ognl@isNotEmpty(nameBeginLikeListOr)">
			
				<foreach collection="nameBeginLikeListOr" item="nameBeginLikeListOrId" index="index" open=", (" close=")" separator="+" >
				if(locate(#{nameBeginLikeListOrId}, t_favorite.name), 1, 0)
				</foreach>
				 as name_advanced_score
			</if>
			<if test="@Ognl@isNotEmpty(nameEndLikeListOr)">
				
				<foreach collection="nameEndLikeListOr" item="nameEndLikeListOrId" index="index" open=", (" close=")" separator="+" >
				if(locate(#{nameEndLikeListOrId}, t_favorite.name), 1, 0)
				</foreach>
				 as name_advanced_score
			</if>
	  
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Favorite.insert" useGeneratedKeys="true" keyProperty="id">
   
        INSERT INTO t_favorite (
	        	id
		     	<if test="@Ognl@isNotNull(name)">
		        	,name
		      	</if>
		     	<if test="@Ognl@isNotNull(favoriteCnt)">
		        	,favorite_cnt
		      	</if>
		     	<if test="@Ognl@isNotNull(createdAt)">
		        	,created_at
		      	</if>
        
        ) VALUES (
	        	#{id}
		     	<if test="@Ognl@isNotNull(name)">
		        	,#{name}
		      	</if>
		     	<if test="@Ognl@isNotNull(favoriteCnt)">
		        	,#{favoriteCnt}
		      	</if>
		     	<if test="@Ognl@isNotNull(createdAt)">
		        	,#{createdAt}
		      	</if>
        )
    
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Favorite.update" >
    
        UPDATE t_favorite 
			<set>
		        <if test="@Ognl@isNotNull(name)">
		        		name = #{name},
		        	</if>
		        	
		        <if test="@Ognl@isNotNull(favoriteCnt)">
		        		favorite_cnt = #{favoriteCnt},
		        	</if>
		        	
		        <if test="@Ognl@isNotNull(createdAt)">
		        		created_at = #{createdAt},
		        	</if>
		        	
	        </set>
        WHERE 
	        id = #{id} 
   
	</update>

    <delete id="Favorite.delete">
    <![CDATA[
        DELETE FROM t_favorite 
        WHERE
        id = #{id} 
    ]]>
    </delete>
    <delete id="Favorite.deleteMultiple">

        DELETE FROM t_favorite 
        WHERE
        	id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
   
    </delete>
    <select id="Favorite.getById" resultMap="Favorite.RM">
		SELECT 
		<include refid="Favorite.get.columns" />
		
	    <![CDATA[
		    FROM t_favorite as t_favorite
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<select id="Favorite.getByMultipleId" resultMap="Favorite.RM">
		SELECT 
		<include refid="Favorite.get.columns" />
		
		    FROM t_favorite as t_favorite
	        WHERE 
		       id in
        	<foreach collection="list" item="id" index="index" open="(" close=")" separator="," >
#{id}			</foreach>
          
	</select>
	
	<sql id="Favorite.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
			<if test="@Ognl@isNotEmpty(id)">
				AND t_favorite.id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(idNotEq)">
				AND t_favorite.id &lt;&gt; #{idNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(idGT)">
				AND t_favorite.id &gt; #{idGT}
			</if>
			<if test="@Ognl@isNotEmpty(idLT)">
				AND t_favorite.id &lt; #{idLT}
			</if>
			<if test="@Ognl@isNotEmpty(idGE)">
				AND t_favorite.id &gt;= #{idGE}
			</if>
			<if test="@Ognl@isNotEmpty(idLE)">
				AND t_favorite.id &lt;= #{idLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(idList)">
				AND t_favorite.id in
				<foreach collection="idList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(idNotEqList)">
				AND t_favorite.id not in
				<foreach collection="idNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>

		   <if test="@Ognl@isNotEmpty(name)">
				AND t_favorite.name = #{name}
			</if>
			<if test="@Ognl@isNotEmpty(nameLike)">
				AND t_favorite.name like CONCAT('%', CONVERT(#{nameLike}, char) ,'%') 
			</if>
			<if test="@Ognl@isNotEmpty(nameBeginLike)">
				AND t_favorite.name like CONCAT('', CONVERT(#{nameBeginLike}, char) ,'%') 
			</if>
			<if test="@Ognl@isNotEmpty(nameEndLike)">
				AND t_favorite.name like CONCAT('%', CONVERT(#{nameEndLike}, char) ,'') 
			</if>
			
			
			<if test="@Ognl@isNotEmpty(nameListAnd)">
				AND 
				<foreach collection="nameListAnd" item="id" index="index" open="(" close=")" separator="AND" >
				t_favorite.name = #{id}
				</foreach>
				
			</if>
			<if test="@Ognl@isNotEmpty(nameLikeListAnd)">
				AND 
				<foreach collection="nameLikeListAnd" item="id" index="index" open="(" close=")" separator="AND" >
				t_favorite.name like CONCAT('%', CONVERT(#{id}, char) ,'%') 
				</foreach>
				
			</if>
			<if test="@Ognl@isNotEmpty(nameBeginLikeListAnd)">
				AND 
				<foreach collection="nameBeginLikeListAnd" item="id" index="index" open="(" close=")" separator="AND" >
				t_favorite.name like CONCAT('', CONVERT(#{id}, char) ,'%') 
				</foreach>
				
			</if>
			<if test="@Ognl@isNotEmpty(nameEndLikeListAnd)">
				AND 
				<foreach collection="nameEndLikeListAnd" item="id" index="index" open="(" close=")" separator="AND" >
				t_favorite.name like CONCAT('%', CONVERT(#{id}, char) ,'') 
				</foreach>
				 
			</if>
			
			<if test="@Ognl@isNotEmpty(nameListOr)">
				AND 
				<foreach collection="nameListOr" item="id" index="index" open="(" close=")" separator="OR" >
				t_favorite.name = #{id}
				</foreach>
				
			</if>
			<if test="@Ognl@isNotEmpty(nameLikeListOr)">
				AND 
				<foreach collection="nameLikeListOr" item="id" index="index" open="(" close=")" separator="OR" >
				t_favorite.name like CONCAT('%', CONVERT(#{id}, char) ,'%') 
				</foreach>
				
			</if>
			<if test="@Ognl@isNotEmpty(nameBeginLikeListOr)">
				AND 
				<foreach collection="nameBeginLikeListOr" item="id" index="index" open="(" close=")" separator="OR" >
				t_favorite.name like CONCAT('', CONVERT(#{id}, char) ,'%') 
				</foreach>
				 
			</if>
			<if test="@Ognl@isNotEmpty(nameEndLikeListOr)">
				AND 
				<foreach collection="nameEndLikeListOr" item="id" index="index" open="(" close=")" separator="OR" >
				t_favorite.name like CONCAT('%', CONVERT(#{id}, char) ,'') 
				</foreach>
				 
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCnt)">
				AND t_favorite.favorite_cnt = #{favoriteCnt}
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCntNotEq)">
				AND t_favorite.favorite_cnt &lt;&gt; #{favoriteCntNotEq}
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCntGT)">
				AND t_favorite.favorite_cnt &gt; #{favoriteCntGT}
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCntLT)">
				AND t_favorite.favorite_cnt &lt; #{favoriteCntLT}
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCntGE)">
				AND t_favorite.favorite_cnt &gt;= #{favoriteCntGE}
			</if>
			<if test="@Ognl@isNotEmpty(favoriteCntLE)">
				AND t_favorite.favorite_cnt &lt;= #{favoriteCntLE}
			</if>
	
			<if test="@Ognl@isNotEmpty(favoriteCntList)">
				AND t_favorite.favorite_cnt in
				<foreach collection="favoriteCntList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>
		   <if test="@Ognl@isNotEmpty(favoriteCntNotEqList)">
				AND t_favorite.favorite_cnt not in
				<foreach collection="favoriteCntNotEqList" item="id" index="index" open="(" close=")" separator="," >
#{id}				</foreach>
		   </if>

	       <if test="@Ognl@isNotEmpty(createdAtBegin)">
				AND t_favorite.created_at &gt;= #{createdAtBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createdAtEnd)">
				AND t_favorite.created_at &lt;= #{createdAtEnd}
		   </if>

		</where>
	</sql>
		
    <select id="Favorite.findPage.count" resultType="long">
        SELECT count(*) FROM t_favorite as t_favorite 
		<include refid="Favorite.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Favorite.findPage" resultMap="Favorite.RM">
    	SELECT 
    	<include refid="Favorite.query.columns" />
    	<include refid="Favorite.query.advanced.columns" />
    	
	    FROM t_favorite as t_favorite 
		<include refid="Favorite.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <select id="Favorite.findList" resultMap="Favorite.RM">
    	SELECT 
    	<include refid="Favorite.query.columns" />
    	<include refid="Favorite.query.advanced.columns" />
    	
	     FROM t_favorite as t_favorite 
		<include refid="Favorite.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	
	
	
	
</mapper>

